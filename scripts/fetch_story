#! /usr/bin/env perl
=head1 NAME

fetch_story - fetch a story from the internet

=head1 SYNOPSIS

fetch_story I<url>

=head1 DESCRIPTION

This fetches a story from the net (including multi-part stories)
tidies up the HTML, and saves it to a file or files.

=head1 OPTIONS

=over

=item --verbose

Be verbose.

=back

=cut
use Getopt::Long 2.34;
use Pod::Usage;
use File::Basename;
use YAML::Any;
use WWW::FetchStory;

#========================================================
# Subroutines

sub init_data ($) {
    my $opts = shift;

    $opts->{manpage} = 0;
    $opts->{verbose} = 0;
    $opts->{debug} = 0;
} # init_data

sub process_args ($) {
    my $opts = shift;

    my $ok = 1;

    # check the rc file if we can
    if (eval("require Getopt::ArgvFile")) {
	my $nameBuilder=sub
	{
	    my $bn = basename($_[0], '');
	    [".${bn}rc", ".${bn}/config", ".config/${bn}/config"];
	};
	Getopt::ArgvFile::argvFile(
				   startupFilename=>$nameBuilder,
				   home=>1,
				   current=>1);
    }

    pod2usage(2) unless @ARGV;

    my $op = new Getopt::Long::Parser;
    $op->configure(qw(auto_version auto_help));
    $op->getoptions($opts,
	       'verbose!',
	       'debug!',
	       'basename=s',
	       'manpage',
	      ) or pod2usage(2);

    if ($opts->{'manpage'})
    {
	pod2usage({ -message => "$0 version $VERSION",
		    -exitval => 0,
		    -verbose => 2,
	    });
    }

} # process_args

#========================================================
# Main

MAIN: {
    my %data = ();

    init_data(\%data);
    process_args(\%data);

    my $fs = WWW::FetchStory->new(%data);
    my $count = 1;
    foreach my $url (@ARGV)
    {
	my %info = $fs->fetch_story(%data,
				    url=>$url);
	print Dump(\%info);
	if ($data{basename})
	{
	    my $cnt = $count;
	    foreach my $file (@{$info{storyfiles}})
	    {
		my $command = sprintf("mv %s %s%02d.html",
		    $file, $data{basename}, $cnt);
		print $command, "\n";
		system($command) == 0 or die "FAILED: $command - $!";
		$cnt++;
	    }
	}
	$count++;
    }
}
